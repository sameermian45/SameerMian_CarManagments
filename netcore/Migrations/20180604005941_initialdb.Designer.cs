// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using netcore.Data;
using System;

namespace netcore.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20180604005941_initialdb")]
    partial class initialdb
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.2-rtm-10011")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("netcore.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<bool>("ApplicationUserRole");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<bool>("CurrencyRole");

                    b.Property<bool>("CustomerInvoiceLineRole");

                    b.Property<bool>("CustomerInvoiceRole");

                    b.Property<bool>("CustomerRole");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("HomeRole");

                    b.Property<bool>("ItemRole");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<bool>("MyCompanyRole");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TaxRole");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.Property<bool>("VendorInvoiceLineRole");

                    b.Property<bool>("VendorInvoiceRole");

                    b.Property<bool>("VendorRole");

                    b.Property<bool>("isSuperAdmin");

                    b.Property<string>("profilePictureUrl");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("netcore.Models.Invoice.Currency", b =>
                {
                    b.Property<string>("currencyId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("createdAt");

                    b.Property<string>("currencyCode")
                        .IsRequired();

                    b.Property<string>("currencyName")
                        .IsRequired();

                    b.HasKey("currencyId");

                    b.ToTable("Currency");
                });

            modelBuilder.Entity("netcore.Models.Invoice.Customer", b =>
                {
                    b.Property<string>("customerId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("additionalInformation");

                    b.Property<string>("address")
                        .IsRequired();

                    b.Property<string>("contactName")
                        .IsRequired();

                    b.Property<DateTime>("createdAt");

                    b.Property<string>("customerName")
                        .IsRequired();

                    b.Property<string>("email")
                        .IsRequired();

                    b.Property<string>("fax");

                    b.Property<string>("phone")
                        .IsRequired();

                    b.Property<string>("taxRegisteredNumber")
                        .IsRequired();

                    b.Property<string>("website");

                    b.HasKey("customerId");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("netcore.Models.Invoice.CustomerInvoice", b =>
                {
                    b.Property<string>("customerInvoiceId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("HasChild");

                    b.Property<DateTime>("createdAt");

                    b.Property<string>("customerId")
                        .IsRequired();

                    b.Property<decimal>("discount");

                    b.Property<DateTime>("dueDate");

                    b.Property<decimal>("grandTotal");

                    b.Property<DateTime>("invoiceDate");

                    b.Property<string>("invoiceNumber")
                        .IsRequired();

                    b.Property<string>("invoiceReference");

                    b.Property<bool>("isPaid");

                    b.Property<string>("myCompanyId")
                        .IsRequired();

                    b.Property<string>("noteToRecipient");

                    b.Property<decimal>("shipping");

                    b.Property<decimal>("subTotal");

                    b.Property<decimal>("taxAmount");

                    b.Property<string>("termsAndCondition");

                    b.HasKey("customerInvoiceId");

                    b.HasIndex("customerId");

                    b.HasIndex("myCompanyId");

                    b.ToTable("CustomerInvoice");
                });

            modelBuilder.Entity("netcore.Models.Invoice.CustomerInvoiceLine", b =>
                {
                    b.Property<string>("customerInvoiceLineId")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("amount");

                    b.Property<DateTime>("createdAt");

                    b.Property<string>("customerInvoiceId");

                    b.Property<string>("description");

                    b.Property<string>("itemId")
                        .IsRequired();

                    b.Property<decimal>("price");

                    b.Property<float>("quantity");

                    b.Property<decimal>("taxAmount");

                    b.Property<string>("taxId")
                        .IsRequired();

                    b.Property<decimal>("totalAmount");

                    b.HasKey("customerInvoiceLineId");

                    b.HasIndex("customerInvoiceId");

                    b.HasIndex("itemId");

                    b.ToTable("CustomerInvoiceLine");
                });

            modelBuilder.Entity("netcore.Models.Invoice.Item", b =>
                {
                    b.Property<string>("itemId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("createdAt");

                    b.Property<string>("currencyId")
                        .IsRequired();

                    b.Property<string>("itemDescription")
                        .IsRequired();

                    b.Property<string>("itemName")
                        .IsRequired();

                    b.Property<decimal>("price");

                    b.Property<string>("taxId")
                        .IsRequired();

                    b.HasKey("itemId");

                    b.HasIndex("currencyId");

                    b.HasIndex("taxId");

                    b.ToTable("Item");
                });

            modelBuilder.Entity("netcore.Models.Invoice.MyCompany", b =>
                {
                    b.Property<string>("myCompanyId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("additionalInformation");

                    b.Property<string>("address")
                        .IsRequired();

                    b.Property<string>("companyName")
                        .IsRequired();

                    b.Property<string>("contactName")
                        .IsRequired();

                    b.Property<DateTime>("createdAt");

                    b.Property<string>("email")
                        .IsRequired();

                    b.Property<string>("fax");

                    b.Property<string>("phone")
                        .IsRequired();

                    b.Property<string>("taxRegisteredNumber")
                        .IsRequired();

                    b.Property<string>("website");

                    b.HasKey("myCompanyId");

                    b.ToTable("MyCompany");
                });

            modelBuilder.Entity("netcore.Models.Invoice.Tax", b =>
                {
                    b.Property<string>("taxId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("createdAt");

                    b.Property<string>("taxLabel")
                        .IsRequired();

                    b.Property<float>("taxRate");

                    b.HasKey("taxId");

                    b.ToTable("Tax");
                });

            modelBuilder.Entity("netcore.Models.Invoice.Vendor", b =>
                {
                    b.Property<string>("vendorId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("additionalInformation");

                    b.Property<string>("address")
                        .IsRequired();

                    b.Property<string>("contactName")
                        .IsRequired();

                    b.Property<DateTime>("createdAt");

                    b.Property<string>("email")
                        .IsRequired();

                    b.Property<string>("fax");

                    b.Property<string>("phone")
                        .IsRequired();

                    b.Property<string>("taxRegisteredNumber")
                        .IsRequired();

                    b.Property<string>("vendorName")
                        .IsRequired();

                    b.Property<string>("website");

                    b.HasKey("vendorId");

                    b.ToTable("Vendor");
                });

            modelBuilder.Entity("netcore.Models.Invoice.VendorInvoice", b =>
                {
                    b.Property<string>("vendorInvoiceId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("HasChild");

                    b.Property<DateTime>("createdAt");

                    b.Property<decimal>("discount");

                    b.Property<DateTime>("dueDate");

                    b.Property<decimal>("grandTotal");

                    b.Property<DateTime>("invoiceDate");

                    b.Property<string>("invoiceNumber")
                        .IsRequired();

                    b.Property<string>("invoiceReference");

                    b.Property<bool>("isPaid");

                    b.Property<string>("myCompanyId")
                        .IsRequired();

                    b.Property<string>("note");

                    b.Property<string>("originalInvoiceNumber")
                        .IsRequired();

                    b.Property<decimal>("shipping");

                    b.Property<decimal>("subTotal");

                    b.Property<decimal>("taxAmount");

                    b.Property<string>("termsAndCondition");

                    b.Property<string>("vendorId")
                        .IsRequired();

                    b.HasKey("vendorInvoiceId");

                    b.HasIndex("myCompanyId");

                    b.HasIndex("vendorId");

                    b.ToTable("VendorInvoice");
                });

            modelBuilder.Entity("netcore.Models.Invoice.VendorInvoiceLine", b =>
                {
                    b.Property<string>("vendorInvoiceLineId")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("amount");

                    b.Property<DateTime>("createdAt");

                    b.Property<string>("description");

                    b.Property<string>("itemId")
                        .IsRequired();

                    b.Property<decimal>("price");

                    b.Property<float>("quantity");

                    b.Property<decimal>("taxAmount");

                    b.Property<string>("taxId")
                        .IsRequired();

                    b.Property<decimal>("totalAmount");

                    b.Property<string>("vendorInvoiceId");

                    b.HasKey("vendorInvoiceLineId");

                    b.HasIndex("itemId");

                    b.HasIndex("vendorInvoiceId");

                    b.ToTable("VendorInvoiceLine");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("netcore.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("netcore.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("netcore.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("netcore.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("netcore.Models.Invoice.CustomerInvoice", b =>
                {
                    b.HasOne("netcore.Models.Invoice.Customer", "customer")
                        .WithMany()
                        .HasForeignKey("customerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("netcore.Models.Invoice.MyCompany", "myCompany")
                        .WithMany()
                        .HasForeignKey("myCompanyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("netcore.Models.Invoice.CustomerInvoiceLine", b =>
                {
                    b.HasOne("netcore.Models.Invoice.CustomerInvoice", "customerInvoice")
                        .WithMany("customerInvoiceLine")
                        .HasForeignKey("customerInvoiceId");

                    b.HasOne("netcore.Models.Invoice.Item", "item")
                        .WithMany()
                        .HasForeignKey("itemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("netcore.Models.Invoice.Item", b =>
                {
                    b.HasOne("netcore.Models.Invoice.Currency", "currency")
                        .WithMany()
                        .HasForeignKey("currencyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("netcore.Models.Invoice.Tax", "tax")
                        .WithMany()
                        .HasForeignKey("taxId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("netcore.Models.Invoice.VendorInvoice", b =>
                {
                    b.HasOne("netcore.Models.Invoice.MyCompany", "myCompany")
                        .WithMany()
                        .HasForeignKey("myCompanyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("netcore.Models.Invoice.Vendor", "vendor")
                        .WithMany()
                        .HasForeignKey("vendorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("netcore.Models.Invoice.VendorInvoiceLine", b =>
                {
                    b.HasOne("netcore.Models.Invoice.Item", "item")
                        .WithMany()
                        .HasForeignKey("itemId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("netcore.Models.Invoice.VendorInvoice", "vendorInvoice")
                        .WithMany("vendorInvoiceLine")
                        .HasForeignKey("vendorInvoiceId");
                });
#pragma warning restore 612, 618
        }
    }
}
