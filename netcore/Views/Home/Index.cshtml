@using netcore.Models.Invoice
@inject netcore.Data.ApplicationDbContext _context
@{
    ViewData["Title"] = "Home Index";
    Layout = "_AdminlteNetcore";

    DateTime start = new DateTime(DateTime.Now.Date.Year, 1, 1);
    DateTime end = start.AddMonths(12);

    decimal custopen = _context.CustomerInvoice.Where(x => x.isPaid.Equals(false) && (x.invoiceDate.Date >= start.Date && x.invoiceDate.Date <= end.Date)).Sum(x => x.grandTotal);
    decimal custpaid = _context.CustomerInvoice.Where(x => x.isPaid.Equals(true) && (x.invoiceDate.Date >= start.Date && x.invoiceDate.Date <= end.Date)).Sum(x => x.grandTotal);
    decimal vendopen = _context.VendorInvoice.Where(x => x.isPaid.Equals(false) && (x.invoiceDate.Date >= start.Date && x.invoiceDate.Date <= end.Date)).Sum(x => x.grandTotal);
    decimal vendpaid = _context.VendorInvoice.Where(x => x.isPaid.Equals(true) && (x.invoiceDate.Date >= start.Date && x.invoiceDate.Date <= end.Date)).Sum(x => x.grandTotal);

    decimal totalcust = custopen + custpaid;
    decimal totalvend = vendopen + vendpaid;

    
    int perccust = (totalcust != 0) ? Convert.ToInt32(decimal.Divide(custpaid, totalcust) * 100) : 0;
    int percvend = (totalvend != 0) ? Convert.ToInt32(decimal.Divide(vendpaid, totalvend) * 100) : 0;

    List<string> labels = new List<string>();

    DateTime now = DateTime.Now;
    DateTime now7 = now.AddMonths(-7);
    DateTime dcount = now7;




    decimal[] valopen = new decimal[8];
    List<CustomerInvoice> opens = _context.CustomerInvoice.Where(x => x.isPaid.Equals(false) && (x.invoiceDate.Date >= now7.Date && x.invoiceDate.Date <= now.Date)).ToList();
    int index = 0;
    while (now7.Date <= now.Date)
    {
        valopen[index] = opens.Where(x => x.invoiceDate.Date.Month.Equals(now7.Month)).Sum(x => x.grandTotal);
        labels.Add(now7.ToString("MMMM"));
        now7 = now7.AddMonths(1);
        index++;
    }


    decimal[] valpaid = new decimal[8];
    now7 = now.AddMonths(-7);
    index = 0;
    List<CustomerInvoice> paids = _context.CustomerInvoice.Where(x => x.isPaid.Equals(true) && (x.invoiceDate.Date >= now7.Date && x.invoiceDate.Date <= now.Date)).ToList();


    while (now7.Date <= now.Date)
    {
        valpaid[index] = paids.Where(x => x.invoiceDate.Month.Equals(now7.Month)).Sum(x => x.grandTotal);
        now7 = now7.AddMonths(1);
        index++;
    }

}



<!-- Content Wrapper. Contains page content -->
<div class="content-wrapper">
    <!-- Content Header (Page header) -->
    <section class="content-header">
        <h1>
            Ecar Autos
            <small>Version 1.0</small>
        </h1>
        <ol class="breadcrumb"></ol>
    </section>
    <!-- Main content -->
    <section class="content">
        <!-- Info boxes -->
        <div class="row">
            <div class="col-md-3 col-sm-6 col-xs-12">
                <div class="info-box">
                    <span class="info-box-icon bg-aqua"><i class="ion ion-ios-gear-outline"></i></span>
                    <div class="info-box-content">
                        <span class="info-box-text">Customer Paid</span>
                        <span class="info-box-number">@custpaid.ToString("0.##")</span>
                    </div>
                    <!-- /.info-box-content -->
                </div>
                <!-- /.info-box -->
            </div>
            <!-- /.col -->
            <div class="col-md-3 col-sm-6 col-xs-12">
                <div class="info-box">
                    <span class="info-box-icon bg-red"><i class="ion ion-ios-gear-outline"></i></span>
                    <div class="info-box-content">
                        <span class="info-box-text">Customer Open</span>
                        <span class="info-box-number">@custopen.ToString("0.##")</span>
                    </div>
                    <!-- /.info-box-content -->
                </div>
                <!-- /.info-box -->
            </div>
            <!-- /.col -->
            <!-- fix for small devices only -->
            <div class="clearfix visible-sm-block"></div>
            <div class="col-md-3 col-sm-6 col-xs-12">
                <div class="info-box">
                    <span class="info-box-icon bg-green"><i class="ion ion-ios-cart-outline"></i></span>
                    <div class="info-box-content">
                        <span class="info-box-text">Vendor Paid</span>
                        <span class="info-box-number">@vendpaid.ToString("0.##")</span>
                    </div>
                    <!-- /.info-box-content -->
                </div>
                <!-- /.info-box -->
            </div>
            <!-- /.col -->
            <div class="col-md-3 col-sm-6 col-xs-12">
                <div class="info-box">
                    <span class="info-box-icon bg-yellow"><i class="ion ion-ios-cart-outline"></i></span>
                    <div class="info-box-content">
                        <span class="info-box-text">Vendor Open</span>
                        <span class="info-box-number">@vendopen.ToString("0.##")</span>
                    </div>
                    <!-- /.info-box-content -->
                </div>
                <!-- /.info-box -->
            </div>
            <!-- /.col -->
        </div>
        <!-- /.row -->
        <div class="row">
            <div class="col-md-12">
                <div class="box">
                    <div class="box-header with-border">
                        <h3 class="box-title">Monthly Recap Report Open vs Paid</h3>
                        <div class="box-tools pull-right">
                            <button type="button" class="btn btn-box-tool" data-widget="collapse">
                                <i class="fa fa-minus"></i>
                            </button>
                            <div class="btn-group">
                                <button type="button" class="btn btn-box-tool dropdown-toggle" data-toggle="dropdown">
                                    <i class="fa fa-wrench"></i>
                                </button>
                                <ul class="dropdown-menu" role="menu">
                                    <li><a href="#">Action</a></li>
                                    <li><a href="#">Another action</a></li>
                                    <li><a href="#">Something else here</a></li>
                                    <li class="divider"></li>
                                    <li><a href="#">Separated link</a></li>
                                </ul>
                            </div>
                            <button type="button" class="btn btn-box-tool" data-widget="remove"><i class="fa fa-times"></i></button>
                        </div>
                    </div>
                    <!-- /.box-header -->
                    <div class="box-body">
                        <div class="row">
                            <div class="col-md-8">
                                <p class="text-center">
                                    <strong></strong>
                                </p>
                                <div class="chart">
                                    <!-- Sales Chart Canvas -->
                                    <canvas id="salesChart" style="height: 180px;"></canvas>
                                </div>
                                <!-- /.chart-responsive -->
                            </div>
                            <!-- /.col -->
                            <div class="col-md-4">
                                <p class="text-center">
                                    <strong>Open vs Paid</strong>
                                </p>

                                <!-- /.progress-group -->
                                <div class="progress-group">
                                    <span class="progress-text">Paid Customer</span>
                                    <span class="progress-number"><b>@custpaid.ToString("0.##")</b>/@totalcust.ToString("0.##")</span>
                                    <div class="progress sm">
                                        <div class="progress-bar progress-bar-red" style="width: @perccust%"></div>
                                    </div>
                                </div>
                                <!-- /.progress-group -->
                                <div class="progress-group">
                                    <span class="progress-text">Paid Vendor</span>
                                    <span class="progress-number"><b>@vendpaid.ToString("0.##")</b>/@totalvend.ToString("0.##")</span>
                                    <div class="progress sm">
                                        <div class="progress-bar progress-bar-green" style="width: @percvend%"></div>
                                    </div>
                                </div>

                            </div>
                            <!-- /.col -->
                        </div>
                        <!-- /.row -->
                    </div>

                </div>
                <!-- /.box -->
            </div>
            <!-- /.col -->
        </div>
        <!-- /.row -->

    </section>
    <!-- /.content -->
</div>
<!-- /.content-wrapper -->

@section Styles{

    <!-- Bootstrap 3.3.7 -->
    <link rel="stylesheet" href="~/adminlte/components/bootstrap/dist/css/bootstrap.min.css">
    <!-- Font Awesome -->
    <link rel="stylesheet" href="~/adminlte/components/font-awesome/css/font-awesome.min.css">
    <!-- Ionicons -->
    <link rel="stylesheet" href="~/adminlte/components/Ionicons/css/ionicons.min.css">
    <!-- jvectormap -->
    <link rel="stylesheet" href="~/adminlte/components/jvectormap/jquery-jvectormap.css">
    <!-- Theme style -->
    <link rel="stylesheet" href="~/adminlte/dist/css/AdminLTE.min.css">
    <!-- AdminLTE Skins. Choose a skin from the css/skins
         folder instead of downloading all of them to reduce the load. -->
    <link rel="stylesheet" href="~/adminlte/dist/css/skins/_all-skins.min.css">
    <!-- HTML5 Shim and Respond.js IE8 support of HTML5 elements and media queries -->
    <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
    <!--[if lt IE 9]>
    <script src="https://oss.maxcdn.com/html5shiv/3.7.3/html5shiv.min.js"></script>
    <script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script>
    <![endif]-->
    <!-- Google Font -->
    <link rel="stylesheet"
          href="https://fonts.googleapis.com/css?family=Source+Sans+Pro:300,400,600,700,300italic,400italic,600italic">
}


@section Scripts{
    <!-- jQuery 3 -->
    <script src="~/adminlte/components/jquery/dist/jquery.min.js"></script>
    <!-- Bootstrap 3.3.7 -->
    <script src="~/adminlte/components/bootstrap/dist/js/bootstrap.min.js"></script>
    <!-- FastClick -->
    <script src="~/adminlte/components/fastclick/lib/fastclick.js"></script>
    <!-- AdminLTE App -->
    <script src="~/adminlte/dist/js/adminlte.min.js"></script>
    <!-- Sparkline -->
    <script src="~/adminlte/components/jquery-sparkline/dist/jquery.sparkline.min.js"></script>
    <!-- jvectormap  -->
    <script src="~/adminlte/plugins/jvectormap/jquery-jvectormap-1.2.2.min.js"></script>
    <script src="~/adminlte/plugins/jvectormap/jquery-jvectormap-world-mill-en.js"></script>
    <!-- SlimScroll -->
    <script src="~/adminlte/components/jquery-slimscroll/jquery.slimscroll.min.js"></script>
    <!-- ChartJS -->
    <script src="~/adminlte/components/chart.js/Chart.js"></script>
    <!-- AdminLTE dashboard demo (This is only for demo purposes) -->
    
    <!-- AdminLTE for demo purposes -->
    <script src="~/adminlte/dist/js/demo.js"></script>

    <script>
        $(function () {
            // -----------------------
            // - MONTHLY SALES CHART -
            // -----------------------

            var jvalpaid = @Html.Raw(Json.Serialize(valpaid));
            var jvalopen = @Html.Raw(Json.Serialize(valopen));
            var jlabels = @Html.Raw(Json.Serialize(labels));
            

            // Get context with jQuery - using jQuery's .get() method.
            var salesChartCanvas = $('#salesChart').get(0).getContext('2d');
            // This will get the first returned node in the jQuery collection.
            var salesChart = new Chart(salesChartCanvas);

            var salesChartData = {
                labels: jlabels,
                datasets: [
                    {
                        label: 'Paid',
                        fillColor: 'rgb(210, 214, 222)',
                        strokeColor: 'rgb(210, 214, 222)',
                        pointColor: 'rgb(210, 214, 222)',
                        pointStrokeColor: '#c1c7d1',
                        pointHighlightFill: '#fff',
                        pointHighlightStroke: 'rgb(220,220,220)',
                        data: jvalpaid
                    },
                    {
                        label: 'Open',
                        fillColor: 'rgba(60,141,188,0.9)',
                        strokeColor: 'rgba(60,141,188,0.8)',
                        pointColor: '#3b8bba',
                        pointStrokeColor: 'rgba(60,141,188,1)',
                        pointHighlightFill: '#fff',
                        pointHighlightStroke: 'rgba(60,141,188,1)',
                        data: jvalopen
                    }
                ]
            };

            var salesChartOptions = {
                // Boolean - If we should show the scale at all
                showScale: true,
                // Boolean - Whether grid lines are shown across the chart
                scaleShowGridLines: false,
                // String - Colour of the grid lines
                scaleGridLineColor: 'rgba(0,0,0,.05)',
                // Number - Width of the grid lines
                scaleGridLineWidth: 1,
                // Boolean - Whether to show horizontal lines (except X axis)
                scaleShowHorizontalLines: true,
                // Boolean - Whether to show vertical lines (except Y axis)
                scaleShowVerticalLines: true,
                // Boolean - Whether the line is curved between points
                bezierCurve: true,
                // Number - Tension of the bezier curve between points
                bezierCurveTension: 0.3,
                // Boolean - Whether to show a dot for each point
                pointDot: false,
                // Number - Radius of each point dot in pixels
                pointDotRadius: 4,
                // Number - Pixel width of point dot stroke
                pointDotStrokeWidth: 1,
                // Number - amount extra to add to the radius to cater for hit detection outside the drawn point
                pointHitDetectionRadius: 20,
                // Boolean - Whether to show a stroke for datasets
                datasetStroke: true,
                // Number - Pixel width of dataset stroke
                datasetStrokeWidth: 2,
                // Boolean - Whether to fill the dataset with a color
                datasetFill: true,
                // String - A legend template
                legendTemplate: '<ul class=\'<%=name.toLowerCase()%>-legend\'><% for (var i=0; i<datasets.length; i++){%><li><span style=\'background-color:<%=datasets[i].lineColor%>\'></span><%=datasets[i].label%></li><%}%></ul>',
                // Boolean - whether to maintain the starting aspect ratio or not when responsive, if set to false, will take up entire container
                maintainAspectRatio: true,
                // Boolean - whether to make the chart responsive to window resizing
                responsive: true
            };

            // Create the line chart
            salesChart.Line(salesChartData, salesChartOptions);

            // ---------------------------
            // - END MONTHLY SALES CHART -
            // ---------------------------
        });
    </script>

}


